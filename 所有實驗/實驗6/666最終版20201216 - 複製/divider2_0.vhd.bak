library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

entity divider  is
generic (N: integer := 8);
port(clk,clear: in std_logic ;
     quot : buffer std_logic_vector(N-1 downto 0) ;
	  remainder : buffer std_logic_vector(N*2-1 downto 0);
    divisor, dividend: in std_logic_vector(N-1 downto 0);
    green_led: out std_logic_vector(2 downto 0));
    
end divider ;

architecture behavior of divider is
    type state_type is(s0,s1,s2a,s2b,s3,s4,bb);
    signal y: state_type ;
    signal time1: integer ;

	 signal tdivisor: std_logic_vector(N*2-1 downto 0);
	 signal rem_zero : std_logic_vector(N*2-1 downto 0) ;
    begin
	 
        now_state_logic: process(clear,dividend,remainder)
			begin
				if clear = '1' then
					count <= 0;
					state <= s0 ;
				elsif (clk'event and clk = '1') then
				case state is
					when s0 =>
						s <= "000";
						if w = '1' then
							state <= s1 ;
						else
							state <= s0 ;
						end if ;
					when s1 =>
					s <= "001";
						if remainder(15) = '1' then
							state <= s2b ;
						else 
						state <= s2a ;
						end if ;
					when s2a =>
					s <= "010";
						state <= s3 ;
					when s2b =>
					s <= "011";
						state <= s3 ;
					when s3 =>
					s <= "100";
						if count < 9 then
							count <= count+1;
							state <= s1 ;
						elsif count = 9 then
--							count <= count+ 1 ;
							state <= s4 ;
						end if ;
					when s4 => 
					s <= "101";
						state <= s4 ;
			end case ;
          end if ;
    end process ;
	output_logic: process(state, tdivisor)
		begin
			case state is
				when s0 =>
				   tdivisor <= divisor & "00000000" ;
					remainder <= "00000000" & dividend ;
					quot <= (others =>'0') ;
--					count <= 0 ;
					y <= remainder(7 downto 0);
				when s1 =>
					remainder <= (remainder - tdivisor) ;
					y <= remainder(7 downto 0);
				when s2a =>
--					quot <= quot(6 downto 0) & '1';
					left_shifta: for i in 1 to N-1 loop
                       quot(N-i) <= quot(N-i-1) ;
                    end loop;
                    quot(0) <= '1' ;
				y <= remainder(7 downto 0);
            when s2b =>
               remainder <= (tdivisor + remainder) ;
--               quot <= quot(6 downto 0) & '0';
						  left_shiftb: for i in 1 to N-1 loop
                        quot(N-i) <= quot(N-i-1) ;
                    end loop;
                    quot(0) <= '0' ;
				y <= remainder(7 downto 0);
            when s3 =>
--               tdivisor <= '0' & tdivisor(15 downto 1);
						  for i in 0 to 2*N-2 loop
                        tdivisor(i) <= tdivisor(i+1) ;
                    end loop;
                    tdivisor(2*N-1) <= '0' ;
			y <= remainder(7 downto 0);
            when s4 =>
					y <= remainder(7 downto 0);

			end case ;
		end process;
		
end behavior ;