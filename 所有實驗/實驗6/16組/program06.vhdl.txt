library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;

entity divider  is
generic (N: integer := 8);
port(clk,clear: in std_logic ;
     quot : buffer std_logic_vector(N/2-1 downto 0) ;
    divisor, dividend: in std_logic_vector(N-1 downto 0);
    remainder: buffer std_logic_vector(N-1 downto 0));
end divider ;

architecture behavior of divider is
    type state_type is(s0,s1,s2a,s2b,s3,s4);
    signal state: state_type ;
    signal count: std_logic ;
    signal w : std_logic ;
    begin
        now_state_logic: process(divisor,divider,remainder)
			begin
				remainder <= divisor ;
				if clear = '0' then
					divisor <= (others <= '0');
					remainder <= (others <= '0') ;
				elsif (clk'event and clk = '1') then
				case state is
					when s0 =>
						if w = '1' then
							state <= s1 ;
						else
							state <= s1 ;
						end if ;
					when s1 =>
						if remainder(N-1) < '0' then
							state <= s2b ;
						else 
						state <= s2a ;
						end if ;
					when s2a =>
						state <= s3 ;
					when s2b =>
						state <= s3 ;
					when s3 =>
						if count = 'N' then
							state <= s4 ;
						else
							count <= count+'1' ;
							state <= s1 ;
						end if ;
			end case ;
		end process ;
	output_logic: process(state, w)
		begin
			case state is
				when s0 =>
					remainder <= dividend ;
				when s1 =>
					remainder <= (remainder - divisor) ;
				when s2a =>
					left_shifta: for i in 0 to N-1 loop
                        quot(i) <= quot(i-1) ;
                    end loop;
                    quot(0) <= '1' ;
                when s2b =>
                    remainder <= (divisor + remainder) ;
                    left_shiftb: for i in 0 to N-1 loop
                        quot(i) <= quot(i-1) ;
                    end loop;
                    quot(0) <= '0' ;
                when s3 =>
                    for i in 1 to N-2 loop
                        divisor(i) <= divisor(i+1) ;
                    end loop;
                    divisor(N-1) <= '0' ;
                when s4 =>
                    remainder <= remainder ;

				
		end process;
end behavior ;
